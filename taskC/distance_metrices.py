import networkx as nx
import multiprocessing as mp
from multiprocessing import Pool, Lock
import pickle
import matplotlib.pyplot as plt
from descartes import PolygonPatch

from seeder import get_seeds_with_kmeans
import osmnx as ox
from voronoi_tutorial_helpers import nodes_nearest_seed, get_seed_color, map_node_color_from_seed, map_edge_color_from_node


N_SEEDS = 15
mutex = Lock()


class FindMarathonDistance:
    def __init__(self, graph, cells: dict, seeds: list, limited_marathons=True):
        self.__graph = graph
        self.__cells = cells
        self.__seeds = seeds
        self.__marathon_paths = []
        self.__target_distance: int = 42000
        self.__limited_marathons = limited_marathons

    def get_marathon_paths(self):
        return self.__marathon_paths

    def get_cell_nodes(self, index):
        return self.__cells[self.__seeds[index]]

    @staticmethod
    def is_beginning_end_repeated(path) -> bool:
        return path[0] == path[-1]

    def get_length(self, node1, node2) -> float:
        edge_data = self.__graph.get_edge_data(node1, node2)
        if edge_data is None:
            return 0
        return edge_data[0]['length']

    def get_path_distance(self, path: list) -> float:
        dist = 0
        for node in range(len(path) - 1):
            dist += self.get_length(path[node], path[node + 1])
            if dist > 42000:
                return 0
        if not self.is_beginning_end_repeated(path):
            dist += self.get_length(path[-1], path[0])
        return dist

    def update_cycle(self, path):
        if not self.is_beginning_end_repeated(path):
            return path + [path[0]]
        return path

    def process_cell(self, subgraph: nx.MultiDiGraph, seed) -> list:
        print("looking over subgraph nodes", len(subgraph.nodes))
        print("finding cycles...")
        cycles = nx.simple_cycles(subgraph)
        print("searching for marathon lengths...")
        marathon_path = None
        for cycle in cycles:
            if len(cycle) < 20:
                continue

            path_distance = self.get_path_distance(cycle)
            if int(path_distance) == 10500 or int(path_distance) == 21000 or int(
                    path_distance) == self.__target_distance:
                print("there is hope!")
                with mutex:
                    if int(path_distance) == 10500:
                        new_cycle = self.update_cycle(cycle)
                        marathon_path = new_cycle + new_cycle[1:] + new_cycle[1:] + new_cycle[1:]
                        print("DO 4 ROUNDS")
                        break
                    elif int(path_distance) == 21000:
                        new_cycle = self.update_cycle(cycle)
                        marathon_path = new_cycle + new_cycle[1:]
                        print("DO 2 ROUNDS")
                        break
                    elif int(path_distance) == self.__target_distance:
                        new_cycle = self.update_cycle(cycle)
                        marathon_path = new_cycle
                        print("MARATHON!!")
                        break
        print("Found a marathon path")
        return marathon_path

    def worker_func(self, i):
        seed = self.__seeds[i]
        subgraph = self.__graph.subgraph(self.__cells[seed])
        return self.process_cell(subgraph, seed)

    def find_marathon_paths(self):
        with Pool(mp.cpu_count()) as pool:
            for marathon_path in pool.imap_unordered(self.worker_func, range(N_SEEDS)):
                if marathon_path is not None:
                    print(marathon_path)
                    self.__marathon_paths.append(marathon_path)
                if len(self.__marathon_paths) >= 3:
                    pool.terminate()  # terminate all worker processes
                    break
        return self.__marathon_paths  # convert back to regular list


if __name__ == '__main__':
    with open('../leeds_drive.pickle', 'rb') as f:
        query_place_graph = pickle.load(f)

    all_nodes = list(query_place_graph.nodes)
    seeds = get_seeds_with_kmeans(query_place_graph, N_SEEDS)
    cells = nx.voronoi_cells(query_place_graph, seeds, weight='length')

    # marathon = FindMarathonDistance(query_place_graph, cells, seeds)
    # marathon.find_marathon_paths()
    # paths = marathon.get_marathon_paths()
    # print("-" * 100)
    # print(paths)

    paths = [   [322766850, 804666308, 9249329514, 7120516508, 52638966, 52638994, 804668550, 322766815, 1489911162, 30803935, 803256468, 30803937, 30803938, 804265941, 803254017, 804265944, 30803947, 30803949, 803253940, 30803955, 804660221, 804660233, 30803966, 30803971, 30803990, 30803997, 804263698, 1554461721, 1554464332, 1554453689, 1554432979, 1554443815, 1554443818, 1554187109, 1554432974, 1554436476, 30810962, 1554184754, 559972809, 1553764594, 6475062653, 1553113216, 1553113232, 1553113231, 1553113224, 1552834815, 1553113226, 8636312226, 1553113233, 1552963155, 1553103619, 8640904690, 1553103617, 1553102454, 1553102450, 1553102452, 1553102448, 1554341243, 1554341234, 1554335449, 1554347246, 1554322665, 1554341232, 559972666, 559972663, 2070242799, 1778084760, 1950773457, 647387973, 52634244, 1618690250, 647391645, 52634258, 647388519, 647388815, 1578565342, 1578565422, 1578565476, 73762977, 1959140060, 1329998324, 1329998313, 1329993279, 3822771111, 10759314756, 10759314743, 10759314649, 10759314722, 10759314654, 7928179760, 7928179764, 3822771073, 1611971789, 1959140597, 1959140640, 1959140600, 1959140585, 1959140636, 1959140648, 1611971780, 1959140805, 1611971819, 2092745992, 1611971813, 25497808, 25497795, 1578634527, 25497790, 1329952858, 25497797, 25497788, 1618700759, 1554693201, 2092732814, 82748845, 9158399448, 1554665820, 2092732803, 1965507144, 1554732545, 8603212250, 11115058260, 11115058259, 517881765, 1553881438, 1553815891, 1553879646, 559900109, 559899927, 8606164212, 1553799122, 1553116432, 1557190426, 1557190442, 1557190440, 1553123511, 1553116421, 1553116418, 846855108, 82750925, 1554405240, 82750891, 1554408787, 796482913, 804660253, 82750920, 82750924, 7966284304, 4552371367, 322766850, 804666308, 9249329514, 7120516508, 52638966, 52638994, 804668550, 322766815, 1489911162, 30803935, 803256468, 30803937, 30803938, 804265941, 803254017, 804265944, 30803947, 30803949, 803253940, 30803955, 804660221, 804660233, 30803966, 30803971, 30803990, 30803997, 804263698, 1554461721, 1554464332, 1554453689, 1554432979, 1554443815, 1554443818, 1554187109, 1554432974, 1554436476, 30810962, 1554184754, 559972809, 1553764594, 6475062653, 1553113216, 1553113232, 1553113231, 1553113224, 1552834815, 1553113226, 8636312226, 1553113233, 1552963155, 1553103619, 8640904690, 1553103617, 1553102454, 1553102450, 1553102452, 1553102448, 1554341243, 1554341234, 1554335449, 1554347246, 1554322665, 1554341232, 559972666, 559972663, 2070242799, 1778084760, 1950773457, 647387973, 52634244, 1618690250, 647391645, 52634258, 647388519, 647388815, 1578565342, 1578565422, 1578565476, 73762977, 1959140060, 1329998324, 1329998313, 1329993279, 3822771111, 10759314756, 10759314743, 10759314649, 10759314722, 10759314654, 7928179760, 7928179764, 3822771073, 1611971789, 1959140597, 1959140640, 1959140600, 1959140585, 1959140636, 1959140648, 1611971780, 1959140805, 1611971819, 2092745992, 1611971813, 25497808, 25497795, 1578634527, 25497790, 1329952858, 25497797, 25497788, 1618700759, 1554693201, 2092732814, 82748845, 9158399448, 1554665820, 2092732803, 1965507144, 1554732545, 8603212250, 11115058260, 11115058259, 517881765, 1553881438, 1553815891, 1553879646, 559900109, 559899927, 8606164212, 1553799122, 1553116432, 1557190426, 1557190442, 1557190440, 1553123511, 1553116421, 1553116418, 846855108, 82750925, 1554405240, 82750891, 1554408787, 796482913, 804660253, 82750920, 82750924, 7966284304, 4552371367, 322766850],
                [364781603, 364813413, 364781719, 364813289, 2870453545, 2870448891, 416384543, 360757002, 364813278, 364794654, 364794656, 364794658, 364794637, 364794591, 364794593, 364794655, 364794476, 364794493, 364794513, 364794539, 364794535, 249238542, 2900799398, 249238543, 364794453, 364794447, 364781778, 364794390, 364794395, 364794408, 364794418, 384962141, 384962140, 384962135, 381914840, 250142898, 384962156, 384962155, 2924576358, 2924576360, 6771521860, 249238538, 381913545, 1931302480, 381913541, 381913538, 381913527, 381913525, 381913520, 286305098, 286305097, 1678451608, 381904650, 1905784238, 247483024, 247483026, 247432107, 309127201, 1905998103, 247432109, 1905998034, 381007517, 381007512, 381016835, 1905997954, 381036152, 1905997952, 373160746, 6586312320, 2872493058, 247484594, 247484693, 372938015, 373160759, 2872473955, 368333261, 1678443275, 2872463778, 416392125, 368333249, 368333244, 368333239, 368333235, 368333278, 368333265, 2872483026, 373394345, 2713094857, 2713094853, 366706312, 372896897, 416882761, 416882768, 369600148, 416882759, 18485812, 416882778, 1899034743, 302323525, 302323529, 31885869, 302323904, 302323910, 302323913, 31885725, 295769516, 295769515, 295769513, 6784651109, 295769512, 295769654, 295769629, 295769648, 295769661, 295769664, 295769668, 295769649, 294826852, 294826866, 294826872, 294826885, 31903624, 31903639, 295769517, 31903641, 31903643, 295769496, 295769520, 295769534, 295769477, 295769444, 295769454, 295769442, 295769468, 293271625, 5599830105, 295769368, 293271537, 293271428, 293271420, 293271417, 293271415, 293271413, 293271412, 293271410, 293271435, 31768775, 31768774, 31768770, 1931356800, 31768768, 4849527307, 31768759, 31768749, 295771391, 294826393, 294826392, 294826391, 294826389, 294826387, 294826377, 294826364, 294826349, 294826342, 294826340, 31768735, 31768740, 294182387, 294182336, 294182391, 294182390, 294182403, 294182301, 294182303, 294182304, 294182292, 294182291, 294182287, 294182282, 294182280, 294182271, 31768731, 5762088492, 31768729, 5762088491, 9593483, 296490139, 296490145, 296490142, 296490140, 296490948, 9593480, 31884999, 8068042826, 9593573, 569665408, 294826450, 345797819, 294826848, 302323959, 569665406, 31885737, 9593581, 269180678, 3258881074, 1816284483, 1816284554, 366969808, 1898973059, 366706335, 366706332, 366706328, 18485814, 366706327, 366706323, 366706342, 1678292230, 360680498, 366706103, 366706064, 366706053, 1706150922, 1706150926, 366706107, 366706112, 5537891548, 364427833, 364415963, 364384887, 2872417319, 364384971, 364384983, 364384987, 364384886, 364415901, 2872371121, 360387595, 4272061514, 4272061515, 364826983, 2872371119, 364813341, 364781603, 364813413, 364781719, 364813289, 2870453545, 2870448891, 416384543, 360757002, 364813278, 364794654, 364794656, 364794658, 364794637, 364794591, 364794593, 364794655, 364794476, 364794493, 364794513, 364794539, 364794535, 249238542, 2900799398, 249238543, 364794453, 364794447, 364781778, 364794390, 364794395, 364794408, 364794418, 384962141, 384962140, 384962135, 381914840, 250142898, 384962156, 384962155, 2924576358, 2924576360, 6771521860, 249238538, 381913545, 1931302480, 381913541, 381913538, 381913527, 381913525, 381913520, 286305098, 286305097, 1678451608, 381904650, 1905784238, 247483024, 247483026, 247432107, 309127201, 1905998103, 247432109, 1905998034, 381007517, 381007512, 381016835, 1905997954, 381036152, 1905997952, 373160746, 6586312320, 2872493058, 247484594, 247484693, 372938015, 373160759, 2872473955, 368333261, 1678443275, 2872463778, 416392125, 368333249, 368333244, 368333239, 368333235, 368333278, 368333265, 2872483026, 373394345, 2713094857, 2713094853, 366706312, 372896897, 416882761, 416882768, 369600148, 416882759, 18485812, 416882778, 1899034743, 302323525, 302323529, 31885869, 302323904, 302323910, 302323913, 31885725, 295769516, 295769515, 295769513, 6784651109, 295769512, 295769654, 295769629, 295769648, 295769661, 295769664, 295769668, 295769649, 294826852, 294826866, 294826872, 294826885, 31903624, 31903639, 295769517, 31903641, 31903643, 295769496, 295769520, 295769534, 295769477, 295769444, 295769454, 295769442, 295769468, 293271625, 5599830105, 295769368, 293271537, 293271428, 293271420, 293271417, 293271415, 293271413, 293271412, 293271410, 293271435, 31768775, 31768774, 31768770, 1931356800, 31768768, 4849527307, 31768759, 31768749, 295771391, 294826393, 294826392, 294826391, 294826389, 294826387, 294826377, 294826364, 294826349, 294826342, 294826340, 31768735, 31768740, 294182387, 294182336, 294182391, 294182390, 294182403, 294182301, 294182303, 294182304, 294182292, 294182291, 294182287, 294182282, 294182280, 294182271, 31768731, 5762088492, 31768729, 5762088491, 9593483, 296490139, 296490145, 296490142, 296490140, 296490948, 9593480, 31884999, 8068042826, 9593573, 569665408, 294826450, 345797819, 294826848, 302323959, 569665406, 31885737, 9593581, 269180678, 3258881074, 1816284483, 1816284554, 366969808, 1898973059, 366706335, 366706332, 366706328, 18485814, 366706327, 366706323, 366706342, 1678292230, 360680498, 366706103, 366706064, 366706053, 1706150922, 1706150926, 366706107, 366706112, 5537891548, 364427833, 364415963, 364384887, 2872417319, 364384971, 364384983, 364384987, 364384886, 364415901, 2872371121, 360387595, 4272061514, 4272061515, 364826983, 2872371119, 364813341, 364781603],
                [1713348641, 789051851, 789051827, 26668329, 26668332, 6297387173, 643595, 6297387178, 3310851892, 256631641, 643600, 255454203, 643603, 255454196, 4413362485, 643605, 21093557, 255454159, 21093544, 21093546, 21093553, 35122892, 35122890, 21093547, 299601704, 9832007, 299601702, 299601645, 299601716, 30983686, 542539508, 542539518, 542539342, 542539531, 390284966, 390284865, 390284864, 390284862, 390284859, 390284855, 390284853, 390284852, 390284847, 390285239, 390285250, 1707465438, 9832042, 26668054, 389950444, 389950443, 26668039, 26668021, 26668032, 5981845399, 5818366095, 390284983, 1405268393, 1405268389, 1706287928, 1648727747, 1405268396, 390285013, 390285007, 390284989, 390284988, 1706434362, 1706434361, 393226714, 2850447218, 393226676, 390284990, 390285103, 390285107, 390285116, 390285110, 390285130, 393226711, 6074483780, 393226670, 393226667, 393226665, 393226664, 393226663, 393226661, 393226659, 1706434549, 1706434527, 1706434525, 1706434508, 1706434556, 390285099, 390285094, 390284995, 6055698246, 6055698247, 2852747233, 32048135, 9832072, 6052986203, 3733145031, 32048132, 395455589, 395455587, 410350960, 6052302518, 6052302513, 410102698, 410102705, 410350832, 410350831, 410350830, 410350827, 410350826, 410350825, 410102669, 410102664, 410102663, 6787554623, 388172936, 410102637, 410102569, 410102563, 26665066, 410102502, 26665103, 20978323, 410102484, 410102430, 26665101, 26665102, 5882444698, 26665081, 26665079, 26665089, 26665088, 26665087, 5882444710, 410109050, 410109051, 393344877, 393344882, 393344928, 393344927, 393344926, 393344924, 393344922, 393344920, 393344919, 393344917, 393344915, 393344914, 392123140, 394925848, 392123154, 393344811, 393344822, 393344819, 393344838, 393344842, 393344843, 393344848, 26665069, 26665075, 394925833, 394925828, 26665077, 5882424894, 26665105, 20978315, 9832102, 5718804085, 393344839, 5718804082, 410350910, 393344827, 410350911, 410350907, 410350904, 410350903, 410350936, 410350939, 395455576, 9832088, 26665323, 26665319, 31933269, 391625097, 391625114, 391625116, 391625093, 392123082, 392123070, 392123080, 391625064, 391625061, 31933171, 31933105, 31932941, 393226554, 393226551, 393226542, 393226540, 393226538, 31932669, 1713348641, 789051851, 789051827, 26668329, 26668332, 6297387173, 643595, 6297387178, 3310851892, 256631641, 643600, 255454203, 643603, 255454196, 4413362485, 643605, 21093557, 255454159, 21093544, 21093546, 21093553, 35122892, 35122890, 21093547, 299601704, 9832007, 299601702, 299601645, 299601716, 30983686, 542539508, 542539518, 542539342, 542539531, 390284966, 390284865, 390284864, 390284862, 390284859, 390284855, 390284853, 390284852, 390284847, 390285239, 390285250, 1707465438, 9832042, 26668054, 389950444, 389950443, 26668039, 26668021, 26668032, 5981845399, 5818366095, 390284983, 1405268393, 1405268389, 1706287928, 1648727747, 1405268396, 390285013, 390285007, 390284989, 390284988, 1706434362, 1706434361, 393226714, 2850447218, 393226676, 390284990, 390285103, 390285107, 390285116, 390285110, 390285130, 393226711, 6074483780, 393226670, 393226667, 393226665, 393226664, 393226663, 393226661, 393226659, 1706434549, 1706434527, 1706434525, 1706434508, 1706434556, 390285099, 390285094, 390284995, 6055698246, 6055698247, 2852747233, 32048135, 9832072, 6052986203, 3733145031, 32048132, 395455589, 395455587, 410350960, 6052302518, 6052302513, 410102698, 410102705, 410350832, 410350831, 410350830, 410350827, 410350826, 410350825, 410102669, 410102664, 410102663, 6787554623, 388172936, 410102637, 410102569, 410102563, 26665066, 410102502, 26665103, 20978323, 410102484, 410102430, 26665101, 26665102, 5882444698, 26665081, 26665079, 26665089, 26665088, 26665087, 5882444710, 410109050, 410109051, 393344877, 393344882, 393344928, 393344927, 393344926, 393344924, 393344922, 393344920, 393344919, 393344917, 393344915, 393344914, 392123140, 394925848, 392123154, 393344811, 393344822, 393344819, 393344838, 393344842, 393344843, 393344848, 26665069, 26665075, 394925833, 394925828, 26665077, 5882424894, 26665105, 20978315, 9832102, 5718804085, 393344839, 5718804082, 410350910, 393344827, 410350911, 410350907, 410350904, 410350903, 410350936, 410350939, 395455576, 9832088, 26665323, 26665319, 31933269, 391625097, 391625114, 391625116, 391625093, 392123082, 392123070, 392123080, 391625064, 391625061, 31933171, 31933105, 31932941, 393226554, 393226551, 393226542, 393226540, 393226538, 31932669, 1713348641]]

    colors = ['red', 'blue', 'green']  # add more colors as needed

    black_color = (0.0, 0.0, 0.0, 1.0)
    node_seed_dict = nodes_nearest_seed(query_place_graph, seeds, cells)
    seed_colors = get_seed_color(seeds, black_color)
    node_color_dict = map_node_color_from_seed(query_place_graph, node_seed_dict, seed_colors)
    edge_colors = map_edge_color_from_node(query_place_graph, node_seed_dict, node_color_dict, black_color)

    node_colors = ['r' if node in seeds else 'w' for node in all_nodes]
    fig, ax = ox.plot.plot_graph(query_place_graph, edge_color=edge_colors, node_color=node_colors, bgcolor='k',
                       show=False,
    save=True,
                       filepath='nvd.png', node_size=1, figsize=(15, 15))

    for path in paths:
        x = [query_place_graph.nodes[node]['x'] for node in path]
        y = [query_place_graph.nodes[node]['y'] for node in path]
        ax.plot(x, y, color='red', linewidth=2)

    plt.show()
    # plot_paths(query_place_graph, paths)
    #
    # plt.show()